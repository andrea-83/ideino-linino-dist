/***
 * file: servo.js
 * author: https://github.com/quasto
 * based on: https://github.com/fivdi/onoff/blob/master/onoff.js 
 ***/

var fs = require('fs'),
    pwmRootPath = '/sys/class/mcuio_pwm/',
	values = [];
	
var StringDecoder = require('string_decoder').StringDecoder;
var decoder = new StringDecoder('utf8');

var conf = {
	'8' :	{	
				'inf' 	:	8,
				'sup'	:	37,
				'rap' 	:	( 180/(37 - 8) ), //11.25, // => 180 / (31-15)
				'byte'	:	3
			},
	'16' : {
				'inf' 	:	150,
				'sup'	:	600,
				'rap' 	:	( 180/(600 - 150) ),//0.72,// => 180 / (500-250)
				'byte'	:	9
			}
}

/*** 
	la formula per trovare il tick da inviare al pwm è questa:
	x = angle //input utente
	y = tick // valore da scrivere sulla pwm
	y = Math.round(  ( x / rap ) + inf);
	
	ie: 
	pwm -> 8bit
	x = 30°
	y = Math.round( (30 / 11,25) + 15 ) -> Math.round( 2,66666 + 15 ) -> Math.round( 17,66666) -> 18;

	pwm -> 8bit
	x = 60°
	y = Math.round( (60 / 11,25) + 15 ) -> Math.round( 5,33333 + 15 ) -> Math.round( 20,33333) -> 20;
	
*/


function initValues(bit){
	var max = Math.pow(2, bit);
	for(i = 0; i < max; i++){
		values.push(new Buffer(i.toString()));
	}
}

	
exports.version = '0.0.1';

function Servo(map, options) {
    var valuePath; // contiene il path al value della gpio
	
	options = options || {};
	
	this.map = map;
    this.pwmPath = pwmRootPath + this.map + '/';
    this.opts = {};
    this.opts.debounceTimeout = options.debounceTimeout || 0;
    this.sampling = options.sampling || 25;
	this.resolution = options.resolution || 40;
	this.bit =  options.bit || 8;
	this.readBuffer = new Buffer(3);
    this.listeners = [];
	
	initValues(this.bit);
	
    valuePath = this.pwmPath + 'value';
	
	this.valueFd = fs.openSync(valuePath, 'r+'); // Cache fd for performance.
	
	if (fs.readFileSync(this.pwmPath + 'enable') == '0' ){
        
		//only for servo, write a value before enable it
		
		var act_val = this.readSync();
		if(act_val < conf[this.bit].inf || act_val > conf[this.bit].sup ){
			//this.writeSync(conf[this.bit].inf);
			this.writeSync(0);
		}
		
		// The pin hasn't been exported yet so export it.
        fs.writeFileSync(this.pwmPath + 'enable', '1');
		
        // Allow all users to read and write the GPIO value file
        fs.chmodSync(valuePath, 0666);
    } 
	
    

}

exports.Servo = Servo;

Servo.prototype.watch = function(callback) {
    var events;
	this.listeners.push(callback);
	var that = this;
	var old_value, new_value;
	if(this.listeners.length == 1 ){
		new_value = that.readSync();
		old_value = new_value;
		var timer = setInterval(function(){
				callbacks = that.listeners.slice(0);
				if(callbacks.length > 0){
					new_value = that.readSync();
					if( new_value <= (old_value - that.resolution) || //risoluzione dell'informazione
						new_value >= (old_value + that.resolution) ){
						old_value = new_value;
						callbacks.forEach(function (callback) {
							callback(null, new_value);
						});
					}
				}
		},this.sampling);//periodo di campionamento
	}
};

/**
 * Write SERVO value synchronously.
 *
 * angle: number // from 0 to 180
 */
Servo.prototype.writeSync = function(angle) {	
	angle = getAngleValues(angle, conf[this.bit]);
	var writeBuffer = values[angle]; 
	fs.writeSync(this.valueFd, writeBuffer, 0, writeBuffer.length, 0);
	return angle;
	
	
};

Servo.prototype.write = function(angle, callback) {
	angle = getAngleValues(angle, conf[this.bit]);
    var writeBuffer = values[angle];
    fs.write(this.valueFd, writeBuffer, 0, writeBuffer.length, 0, callback(angle));
};

function getAngleValues(angle, param){
	if(angle < 0 ) angle = 0;
	if(angle > 180) angle = 180;
	return Math.round( (angle / param.rap ) + param.inf );
}


/**
 * Read SERVO value synchronously.
 *
 * Returns - number // from 0 to 255
 */
Servo.prototype.readSync = function() {
    this.readBuffer.fill(0);//pulisco il buffer
	fs.readSync(this.valueFd, this.readBuffer, 0, 3, 0);
    //return this.readBuffer[0] === one[0] ? 1 : 0;
	return parseInt(decoder.write(this.readBuffer));
};


/**
 * Get SERVO options.
 *
 * Returns - object // Must not be modified
 */
Servo.prototype.options = function() {
    return this.opts;
};
